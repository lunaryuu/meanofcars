sun_acc <- sqldf('select * from day_of_week where "Sunday"')
# Step 3: Understand the data using SQL (via SQLDF)
############## 5. how many accidents happen on SUNDAY?
# Use sql to count how many obersavations meet the criterion that DAY_OF_WEEK is "SUNDAY"
sun_acc <- sqldf('select * from df1(day_of_week) where "Sunday"')
# Step 3: Understand the data using SQL (via SQLDF)
############## 5. how many accidents happen on SUNDAY?
# Use sql to count how many obersavations meet the criterion that DAY_OF_WEEK is "SUNDAY"
sun_acc <- sqldf('select * from df1 where df1(day_of_week) = "Sunday"')
# Print the result
print(sun_acc)
# Step 3: Understand the data using SQL (via SQLDF)
############## 5. how many accidents happen on SUNDAY?
# Use sql to count how many obersavations meet the criterion that DAY_OF_WEEK is "SUNDAY"
sun_acc <- sqldf('select count(df1.day_of_week) from df1 where df1(day_of_week) = "Sunday"')
sun_acc <- sqldf('select count(df1.day_of_week) from df1 where df1(day_of_week) = "Sunday"')
sun_acc <- sqldf('select count(df1.day_of_week) from df1 where df1.day_of_week = "Sunday"')
sun_acc <- sqldf('select count(df1.day_of_week) FROM df1 WHERE day_of_week = "SUNDAY"')
sun_acc <- sqldf('select count(day_of_week) FROM df1 WHERE day_of_week = "SUNDAY"')
View(mydata)
View(mydata)
sun_acc <- sqldf('select count(day_of_week) FROM mydata WHERE day_of_week = "SUNDAY"')
# Print the result
print(sun_acc)
sun_acc <- sqldf('select count(day_of_week) FROM mydata WHERE day_of_week = "%SUNDAY%"')
# Print the result
print(sun_acc)
sun_acc <- sqldf("SELECT count(INJURY) FROM df1 WHERE day_of_week = 'SUNDAY'")
sun_acc <- sqldf("select count(df1.DAY_OF_WEEK) From df1 where DAY_OF_WEEK = 'SUNDAY'")
fileURL <-"https://opendata.maryland.gov/resource/pdvh-tf2u.json"
######### 1. investigate the url above.
######### 2. covert the JSON format dataset into R objects
mydata <- fromJSON(fileURL)
############4. Print the number of rows below.
numRows <- length(mydata)
numRows
nameList1 <-names(mydata[[1]])
#then create a dataframe from it.
df1 <- data.frame(mydata2, stringsAsFactors = FALSE)
# rename the rest of columns
nameList1 <- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WEEK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION", "CITY_NAME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLISION_WITH_1","COLLISION_WITH_2")
names(df1) <- nameList1
#then create a dataframe from it.
df1 <- data.frame(mydata2, stringsAsFactors = FALSE)
fileURL <-"https://opendata.maryland.gov/resource/pdvh-tf2u.json"
######### 1. investigate the url above.
######### 2. covert the JSON format dataset into R objects
mydata <- fromJSON(fileURL)
# look into the data summary
summary(mydata)
#############3. what is the data type of "mydata" after reading the URL using the appropriate function.
#Populate here to write your script to check the data type of mydata
str(mydata)
############4. Print the number of rows below.
numRows <- length(mydata)
numRows
nameList1 <-names(mydata[[1]])
#If you investigate mydata, you will find the length of each element is different. We must make it consistent. So, do the following.
mydata2 <- plyr::ldply(mydata,rbind)
#then create a dataframe from it.
df1 <- data.frame(mydata2, stringsAsFactors = FALSE)
# rename the rest of columns
nameList1 <- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WEEK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION", "CITY_NAME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLISION_WITH_1","COLLISION_WITH_2")
names(df1) <- nameList1
sun_acc <- sqldf("select count(df1.DAY_OF_WEEK) From df1 where DAY_OF_WEEK = 'SUNDAY'")
sun_acc <- sqldf("select count(df1.DAY_OF_WEEK) From df1 where DAY_OF_WEEK = '%SUNDAY%'")
View(df1)
View(df1)
View(mydata2)
View(mydata2)
sun_acc <- sqldf("SELECT count(INJURY) FROM df1 WHERE day_of_week = '%SUNDAY%'")
fileURL <-"https://opendata.maryland.gov/resource/pdvh-tf2u.json"
######### 1. investigate the url above.
######### 2. covert the JSON format dataset into R objects
mydata <- fromJSON(fileURL)
# look into the data summary
summary(mydata)
#############3. what is the data type of "mydata" after reading the URL using the appropriate function.
#Populate here to write your script to check the data type of mydata
str(mydata)
############4. Print the number of rows below.
numRows <- length(mydata)
numRows
nameList1 <-names(mydata[[1]])
#If you investigate mydata, you will find the length of each element is different. We must make it consistent. So, do the following.
mydata2 <- plyr::ldply(mydata,rbind)
View(mydata2)
View(mydata2)
#then create a dataframe from it.
df1 <- data.frame(mydata2, stringsAsFactors = FALSE)
# rename the rest of columns
nameList1 <- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WEEK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION", "CITY_NAME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLISION_WITH_1","COLLISION_WITH_2")
names(df1) <- nameList1
View(df1)
View(df1)
sun_acc <- sqldf("SELECT count(INJURY) FROM mydata WHERE day_of_week = '%SUNDAY%'")
# Print the result
print(sun_acc)
sun_acc <- sqldf("SELECT count(INJURY) FROM df1 WHERE day_of_week = '%SUNDAY%'")
View(sun_acc)
View(sun_acc)
fileURL <-"https://opendata.maryland.gov/resource/pdvh-tf2u.json"
######### 1. investigate the url above.
######### 2. covert the JSON format dataset into R objects
mydata <- fromJSON(fileURL)
############4. Print the number of rows below.
numRows <- length(mydata)
numRows
nameList1 <-names(mydata[[1]])
#then create a dataframe from it.
df1 <- data.frame(mydata, stringsAsFactors = FALSE)
View(df1)
View(df1)
# rename the rest of columns
nameList1 <- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WEEK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION", "CITY_NAME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLISION_WITH_1","COLLISION_WITH_2")
names(df1) <- nameList1
sun_acc <- sqldf("SELECT count(INJURY) FROM df1 WHERE day_of_week = '%SUNDAY%'")
# Print the result
print(sun_acc)
sun_acc <- sqldf("SELECT count(INJURY) FROM df1 WHERE day_of_week = %SUNDAY%")
sun_acc <- sqldf("SELECT count(INJURY) FROM df1 WHERE day_of_week = '%SUNDAY%'")
#If you investigate mydata, you will find the length of each element is different. We must make it consistent. So, do the following.
mydata2 <- plyr::ldply(mydata,rbind)
#then create a dataframe from it.
df1 <- data.frame(mydata2, stringsAsFactors = FALSE)
# rename the rest of columns
nameList1 <- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WEEK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION", "CITY_NAME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLISION_WITH_1","COLLISION_WITH_2")
names(df1) <- nameList1
View(df1)
View(df1)
sun_acc <- sqldf("SELECT count(INJURY) FROM df1 WHERE day_of_week = '%SUNDAY%'")
#############3. what is the data type of "mydata" after reading the URL using the appropriate function.
#Populate here to write your script to check the data type of mydata
str(mydata)
sun_acc <- sqldf("SELECT count(day_of_week) FROM df1 WHERE day_of_week = '%SUNDAY%'")
sun_acc <- sqldf("select count(DAY_OF_WEEK) from df1 where TRIM(DAY_OF_WEEK) = 'SUNDAY'")
sun_acc <- sqldf("select count(DAY_OF_WEEK) from df1 where DAY_OF_WEEK = like 'SUNDAY'")
sun_acc <- sqldf("select count(DAY_OF_WEEK) from df1 where DAY_OF_WEEK LIKE 'SUNDAY'")
fileURL <-"https://opendata.maryland.gov/resource/pdvh-tf2u.json"
######### 1. investigate the url above.
######### 2. covert the JSON format dataset into R objects
mydata <- fromJSON(fileURL)
# look into the data summary
summary(mydata)
#############3. what is the data type of "mydata" after reading the URL using the appropriate function.
#Populate here to write your script to check the data type of mydata
str(mydata)
View(mydata)
View(mydata)
############4. Print the number of rows below.
numRows <- length(mydata)
nameList1 <-names(mydata[[1]])
numRows
#If you investigate mydata, you will find the length of each element is different. We must make it consistent. So, do the following.
mydata2 <- plyr::ldply(mydata,rbind)
mydata2
#then create a dataframe from it.
df1 <- data.frame(mydata2, stringsAsFactors = FALSE)
View(df1)
View(df1)
# rename the rest of columns
nameList1 <- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WEEK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION", "CITY_NAME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLISION_WITH_1","COLLISION_WITH_2")
names(df1) <- nameList1
View(mydata2)
View(mydata2)
sample(c(1,3,5,7,9), size=5, replace=TRUE)
sample(c(1,3,5,7,9), size=5, replace=TRUE)
replicate(4, mean(sample(c(1,3,5,7,9), size=5, replace=TRUE), simplify=TRUE))
m.example <- data.frame(patient = 1:100,
age = rnorm(100, mean = 60, sd = 12),
treatment = gl(2, 50, labels = c("Treatment", "Control")))
sapply(m.example$age, mean)
tapply(m.example$age, m.example$treatment, mean)
tapply(m.example$age, mean)
sapply(m.example$age, m.example$treatment, mean)
sapply(m.example$age, mean)
tapply(m.example$age, m.example$treatment, mean)
assignment2 <- c(16, 18, 14, 22, 27, 17, 19, 17, 17, 22, 20, 22)
myMean <- function(assignment2) { return(sum(assignment)/length(someData)) }
myMean
View(myMean)
View(myMean)
myMean(assignment2)
myMean()
myMean()
myMean <- function(assignment2)
{
return(sum(assignment2)/length(someData))
}
myMean()
assignment2 <- c(16, 18, 14, 22, 27, 17, 19, 17, 17, 22, 20, 22)
myMean <- function(assignment2)
{
return(sum(assignment2)/length(someData))
}
myMean()
someData
assignment2 <- c(16, 18, 14, 22, 27, 17, 19, 17, 17, 22, 20, 22)
myMean <- function(assignment2)
{
return(sum(assignment)/length(someData))
}
myMean()
hotdogs <- read_csv("http://datasets.flowingdata.com/hot-dog-contest-winners.csv")
hotdogs <- read.csv("http://datasets.flowingdata.com/hot-dog-contest-winners.csv")
head(hotdogs)
(library("ggplot2"))
colors <- ifelse(hotdogs$New.record == 1, "darkred", "grey")
barplot(hotdogs$Dogs.eaten, names.arg = hotdogs$Year, col=colors, border=NA,
main = "Nathan's Hot Dog Eating Contest Results, 1980-2010",  xlab="Year", ylab="Hot dogs and buns (HDBs) eaten")
ggplot(hotdogs) + geom_bar(aes(x=Year, y=Dogs.eaten, fill=factor(New.record)), stat="identity") +
labs(title="Nathan's Hot Dog Eating Contest Results, 1980-2010", fill="New Record") +
xlab("Year") + ylab("Hot dogs and buns (HDBs) eaten")
hotdog_places <- as.matrix(hotdog_places) # Rename the columns to correspond to the years 2000-2010
View(hotdogs)
View(hotdogs)
ecodata <- data("economics")
ecodata <- data("economics")
data("economics")
head(economics)
ecodata <- economics
library("ggplot2")
ecodata <- economics
View(ecodata)
View(ecodata)
econdata <- economics
View(econdata)
View(econdata)
year <- function(x) as.POSIXlt(x)$year + 1900
economics$year <- year(economics$date) # we setting up our analysis
plot1 <- qplot(date, unemploy / pop, data = economics, geom = "line")
plot1
plot2 <- qplot(date, uempmed, data = economics, geom = "line")
grid.arrange(plot1, plot2, ncol=2)
plot1 <- qplot(unemploy/pop, uempmed, data = economics, geom = c("point", "path"))
plot2 <- qplot(unemploy/pop, uempmed, data = economics, geom = c("point", "path"), color=year)
grid.arrange(plot1, plot2, ncol=2)
plot2
library(tseries)
install.package("tseries")
install.packages("tseries")
library(tseries)
air <- AirPassengers
ts.plot(air)
air
acf(air)
library("tseries")
library("ggplot2")
air <- AirPassengers
ts.plot(air)
?ts.plot
ts.plot(air, gpars = list(title = "Air Passengers"))
ts.plot(air, gpars = list(main = "Air Passengers"))
library("CarletonStats")
library("devtools")
library("epanetReader")
library("fmsb")
library("ggplot2")
library("ggthemes")
library("latticeExtra")
library("MASS")
library("PerformanceAnalytics")
library("psych")
library("plyr")
library("prettyR")
library("plotrix")
library("proto")
library("RCurl")
library("reshape")
library("reshape2")
#Code
x <- 1967:1977
y <- c(0.5,1.8,4.6,5.3,5.3,5.7,5.4,5,5.5,6,5)
d <- data.frame(x, y)
ggplot(d, aes(x,y)) + geom_line() + geom_point(size=3) + theme_tufte(base_size = 15) +
theme(axis.title=element_blank()) + geom_hline(yintercept = c(5,6), lty=2) +
scale_y_continuous(breaks=seq(1, 6, 1), label=sprintf("$%s",seq(300,400,20))) +
scale_x_continuous(breaks=x,label=x) +
annotate("text", x = c(1977,1977.2), y = c(1.5,5.5), adj=1,  family="serif",
label = c("Per capita\nbudget expandures\nin constant dollars", "5%"))
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{ outlier.vec[i] <- all(outliers[i,]) } return(outlier.vec) }
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tukey.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{
outlier.vec[,i] <- all(outliers[i,])
}
return(outlier.vec) }
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
devtools::install_github("r-lib/devtools")
has_devel()
library(devtools)
has_devel()
install.packages("animation")
install.packages("gganimate")
library(ggplot2)
library(gganimate)
library(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
install.packages(gapminder)
myCars <- data("mtcars")
myCars <- data.frame(data("mtcars"))
myCars <- mtcars
View(myCars)
myCars <- mtcars
ggplot(myCars, aes(x = cyl, y = mpg) + geom_dotplot())
ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point()
?geom_point
ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 10, color = "blue")
ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 6, color = "blue")
ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 4, color = "blue")
ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 4, color = factor(mpg))
ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 4, color = factor(cyl))
ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 4, color = factor(myCars$cyl))
ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 4, color = factor(myCars$mpg))
ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 4, color = factor(myCars$cyl))
mycars_plot <- ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 4, color = factor(myCars$cyl))
animated <- mycars_plot + transition_states(myCars$mpg, transition_length = 1, state_length = 1)
animated <- mycars_plot + transition_states(myCars$mpg, transition_length = 2, state_length = 1)
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 2, state_length = 1)
animated
animated
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 3, state_length = 1)
animated
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 3, state_length = 1) + ease_aes('cubic-in-out')
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 4, state_length = 1) + ease_aes('cubic-in-out')
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 4, state_length = 2) + ease_aes('cubic-in-out')
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 4, state_length = 3) + ease_aes('cubic-in-out')
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) + ease_aes('cubic-in-out')
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 5, state_length = 1) + ease_aes('cubic-in-out')
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 10, state_length = 1) + ease_aes('cubic-in-out')
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) + ease_aes('cubic-in-out')
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) + ease_aes(y = "bounce-out")
animated
mycars_plot <- ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 4, color = cyl)
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) + ease_aes(y = "bounce-out")
animated
mycars_plot <- ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 4, color = myCars$cyl)
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) + ease_aes(y = "bounce-out")
animated
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 3, color = myCars$cyl)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 3, color = myCars$cyl)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 3, color = myCars$mpg)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 3, color = myCars$cyl)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 3, color = c("blue", "green", "purple"))
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = cyl, y = mpg)) + geom_point(size = 3, color = factor(myCars$cyl))
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + geom_point(size = 3, color = "blue")
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + geom_point(size = 3, color = factor(myCars$hp))
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + geom_point(size = 3, color = factor(myCars$wt))
mycars_plot
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) + ease_aes(y = "bounce-out")
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) + ease_aes("cubic-in-out")
animated
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + geom_point(size = 3, color = "blue")
mycars_plot
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) + ease_aes("cubic-in-out")
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) + enter_fade() + exit_shrink()
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) +
enter_fade() + enter_drift(x_mod = -1) +
exit_shrink() + exit_drift(x_mod = 5)
animated
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + geom_point(size = 3, color = myCars$wt)
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) +
enter_fade() + enter_drift(x_mod = -1) +
exit_shrink() + exit_drift(x_mod = 5)
animated
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + geom_point(size = 3, color = myCars$hp)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + geom_point(size = 3, color = myCars$wt)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + geom_point(size = 3, color = "purple")
mycars_plot
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) +
enter_fade() + enter_drift(x_mod = -1) +
exit_shrink() + exit_drift(x_mod = 5)
animated
?ggplot
?aes
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars") + geom_point(size = 3, color = "purple")
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower" ) + geom_point(size = 3, color = "purple")
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight")
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 3, color = "purple")
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple")
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 2)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 3)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 4)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 5)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 6)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 10)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 9)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 8)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 7)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 6)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 5)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", shape = 1)
mycars_plot
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) +
enter_fade() + enter_drift(x_mod = -1) +
exit_shrink() + exit_drift(x_mod = 5)
animated
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple", fill = "black", shape = 1)
mycars_plot
mycars_plot <- ggplot(myCars, aes(x = hp, y = wt)) + ggtitle("MT Cars", "Weight vs Horsepower") + xlab("Horsepower") + ylab("Weight") +
geom_point(size = 5, color = "purple")
mycars_plot
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1) +
enter_fade() + enter_drift(x_mod = -1) +
exit_shrink() + exit_drift(x_mod = 5)
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 1, state_length = 1)
animated
animated <- mycars_plot + transition_states(myCars$cyl, transition_length = 2, state_length = 1)
animated
animated
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
library(gganimate)
myCars <- mtcars
meansDisplay <- function(x)
{
mpgMean <- mean(myCars$mpg)
cylMean <- mean(myCars$cyl)
dispMean <- mean(myCars$disp)
hpMean <- mean(myCars$hp)
wtMean <- mean(myCars$mpg)
if (x == "mpg")
{print(mpgMean)}
if (x == "cyl")
{print(cylMean)}
if (x == "disp")
{print(dispMean)}
if (x == "hp")
{print(hpMean)}
if (x == "wt")
{print(wtMean)}
}
